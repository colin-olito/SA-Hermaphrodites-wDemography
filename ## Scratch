## Scratch

rm(list=ls())
source('R/functions-Simulations.R')

#  TEST THE SIMULATION LOOP
results  <-  fwdDemModelSim(om = 2, g = 3, theta = c(0.6,0.6,0.05,6), theta_prime = c(0.6,0.6,0.05,6), 
							hf = 1/2, hm = 1/2, sf = 0.1, sm = 0.05, C = 0, delta = 0, tlimit = 10^5, 
							Ainvade = TRUE, intInit = FALSE)
str(results)
results$runtime
results$pDelta

round(results$pEq, digits=5)
dim(results$p_genotypes)
results$p_genotypes[,1]
round(results$p_genotypes[,results$tlimit], digits=5)
results$nzero
results$extinct
results$polymorphism
results$pEq


tlimit  <- results$runtime
nout  <-  results$nout[1:6,1:results$runtime] + results$nout[7:12,1:results$runtime]
sum(nout[,results$runtime])


par(mfrow=c(2,2))
plot( 1:tlimit, nout[1, ], log="y", ylim=c(10^-5,max(nout)), type="l", col="red", lty=2)
lines(1:tlimit, nout[2, ], col="red", type="l")
lines(1:tlimit, nout[3, ], col="orange", type="l", lty=2)
lines(1:tlimit, nout[4, ], col="orange", type="l")
lines(1:tlimit, nout[5, ], col="green", type="l", lty=2)
lines(1:tlimit, nout[6, ], col="green", type="l")
plot( 1:tlimit, colSums(nout[,1:tlimit]), log="y", type="l", col="red", lty=2)

p_genotypes  <-  results$p_genotypes[,1:results$runtime]
plot(1:tlimit,p_genotypes[1,],col="red",type="l",ylim = c(0,1))
lines(1:tlimit,p_genotypes[2,],col="orange",type="l")
lines(1:tlimit,p_genotypes[3,],col="green",type="l")

par(mfrow=c(2,2))

#  TEST THE s_f x s_m SIMULATION LOOP FOR FIGURES
rm(list=ls())
source('R/functions-Simulations.R')

pars  <-  list(
				"hf"     =  1/4,
				"hm"     =  1/4,
				"C"      =  1/2,
				"delta"  =  0
				)

test  <-  selLoop(sMax = 0.15, nSamples=100,
				  om = 2, g = 3, theta = c(0.6,0.6,0.05, 6.1), theta_prime = c(0.6,0.6,0.05, 6.1), 
				  hf = pars$hf, hm = pars$hm, C = pars$C, delta = pars$delta, tlimit = 10^5, returnRes=TRUE)
head(test)
sum(test$poly == 0)

sum(all(test$poly == 0 && test$extinct == 0))

x  <-  test[round(test$Eq_paa, digits=5)==1,]
fix_a  <-  x[x$extinct==0,]
x  <-  test[round(test$Eq_pAA, digits=5)==1,]
fix_A  <-  x[x$extinct==0,]

smLine  <-  seq(0,1, length=100)
inv_A  <-  popGen_A_invade(hf=pars$hf, hm=pars$hm, sm=smLine, C=pars$C)
inv_a  <-  popGen_a_invade(hf=pars$hf, hm=pars$hm, sm=smLine, C=pars$C)


plot(sf ~ sm, xlim=c(0,0.15), ylim=c(0,0.15), data=test)
lines(inv_A ~ smLine, lwd=2, col='#252525')
lines(inv_a ~ smLine, lwd=2, col='#252525')
points(sf[poly == 1 & extinct == 0] ~ sm[poly == 1 & extinct == 0], pch=21, bg=transparentColor('green2', opacity=0.6), data=test)
points(sf ~ sm, pch=21, bg=transparentColor('dodgerblue2', opacity=0.7), data=fix_A)
points(sf ~ sm, pch=21, bg=transparentColor('purple', opacity=0.6), data=fix_a)
points(sf[extinct == 1] ~ sm[extinct == 1], pch=21, bg=transparentColor('red', opacity=0.9), data=test)










sMax = 0.15
nSamples=1e+2
om = 2
g = 3
theta = c(0.6,0.6,0.05,6)
theta_prime = c(0.6,0.6,0.05,6)
hf = 1/4
hm = 1/4
C = 0
delta = 0
delta_j = 0
delta_a = 0
delta_gamma = 0
tlimit = 10^5
intInit = FALSE

Cs          <-  seq(0,1, by=0.1)
simPoly     <-  c()
eigPoly     <-  c()
extinct     <-  c()
simPolyExt  <-  c()
popGenPoly  <-  c()
i=1

sms  <- seq(0,sMax, length=100)
plot(popGen_a_invade(hf=hf, hm=hm, sm=sms, C=C) ~ sms, ylim=c(0,sMax), type='l', lwd=2)
lines(popGen_A_invade(hf=hf, hm=hm, sm=sms, C=C) ~ sms, lwd=2, col=2)


dat1  <-  read.csv(file='./output/simData/simPolySpace_sMax0.15_nSamples1000_hf0.5_hm0.5_delta0_dj0_da0_dg0.csv', header=TRUE)
dat2  <-  read.csv(file='./output/simData/simPolySpace_sMax0.15_nSamples1000_hf0.25_hm0.25_delta0_dj0_da0_dg0.csv', header=TRUE)
par(mfrow=c(1,2))
plot(simPolyViable ~ Cs, ylim=c(0,0.1), pch='', xlim=c(0,0.9), data=dat1)
#points(simPolyViable ~ Cs, data=dat1)
points(eigPolyViable ~ Cs, pch=21, bg='grey60', ylim=c(0,0.15), xlim=c(0,0.9), data=dat1)
points(popGenPoly ~ Cs, pch=21, bg='red', ylim=c(0,0.15), xlim=c(0,0.9), data=dat1)
plot(simPolyViable ~ Cs, ylim=c(0,1), pch='', xlim=c(0,0.9), data=dat2)
points(eigPolyViable ~ Cs, pch=21, bg='grey60', data=dat2)
points(popGenPoly ~ Cs, pch=21, bg='red', data=dat2)

plot(simAFix ~ Cs, ylim=c(0,1), xlim=c(0,0.9), pch='', data=dat)
points(eigAFix ~ Cs, pch=21, col='purple', data=dat)
points(eigAFixViable ~ Cs, pch=21, bg='purple', data=dat)
points(eigaFix ~ Cs, pch=21, col='dodgerblue2', data=dat)
points(eigaFixViable ~ Cs, pch=21, bg='dodgerblue2', data=dat)



df1  <-  read.csv("./output/simData/simPolySpace_sMax0.15_nSamples1000_hf0.25_hm0.25_delta0_dj0_da0_dg0_f6.csv", header=TRUE)









rm(list=ls())
source('R/functions-Simulations.R')

source('R/functions-Figs.R')

FunnelPlots(df1 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f6.5',
			df2 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0.21_dj0_da0_dg0_f6.5',
			df3 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0.25_dj0_da0_dg0_f6.5',
			df4 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0.3_dj0_da0_dg0_f6.5')


FunnelPlots(df1 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0.1_da0_dg0_f6.5',
			df2 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0.11_da0_dg0_f6.5',
			df3 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0.12_da0_dg0_f6.5',
			df4 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0.13_da0_dg0_f6.5')


FunnelPlots(df1 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0.1_dg0_f6.5',
			df2 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0.11_dg0_f6.5',
			df3 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0.12_dg0_f6.5',
			df4 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0.13_dg0_f6.5')


FunnelPlots(df1 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0.2_f6.5',
			df2 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0.22_f6.5',
			df3 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0.24_f6.5',
			df4 = 'demSimsSfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0.26_f6.5')



df1 = "deltaSimPolySpace_sMax0.15_nSamples1000_C0.25_hf0.5_hm0.5_f6.5"
df2 = "deltaSimPolySpace_sMax0.15_nSamples1000_C0.25_hf0.5_hm0.5_f6.5"
df3 = "deltaSimPolySpace_sMax0.15_nSamples1000_C0.5_hf0.5_hm0.5_f6.5"
df4 = "deltaSimPolySpace_sMax0.15_nSamples1000_C0.5_hf0.25_hm0.25_f6.5"



        PGSpace     <-  c()
        for(i in 1:length(Cs)) {
            PGSpace[i]     <-  popGen_PolySpace_Delta_DomRev(C=Cs[i], delta=deltaSeq[i], sMax=sMax)
        }


0.01
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90

			pHat_AA    <-  pBoundAA[c(1,2,3,10,11,12,4,5,6,13,14,15,7,8,9,16,17,18)]
			pHat_aa    <-  pBoundaa[c(1,2,3,10,11,12,4,5,6,13,14,15,7,8,9,16,17,18)]


om=3
print(c(1:om, g*om+1:om, om+1:om, g*om+om+1:om, 2*om+1:om, g*om+2*om+1:om))




om = 2
g = 3
theta = c(0.6, 0.6, 0.05, 6)
theta_prime = 6
hf = 1/2
hm = 1/2
sf = 0.1
sm = 0.105
C = 0
delta = 0
delta_j = 0
delta_a = 0
delta_gamma = 0
datMat = NA
tlimit = 10^4
Ainvade = FALSE
intInit = FALSE


cdb_Mg$mat



test  <-  fwdSimMimulus(datMat=datMat, theta.list=theta.list, delta.list=delta.list,useCompadre=TRUE,
						hf = 1/2, hm = 1/2, sf = 0.1, sm = 0.105, C = 0,
						tlimit = 10^4, Ainvade = FALSE, intInit = FALSE)
test2  <-  fwdSimMimulus(datMat=datMat, theta.list=theta.list, delta.list=delta.list,useCompadre=FALSE,
						hf = 1/2, hm = 1/2, sf = 0.1, sm = 0.105, C = 0,
						tlimit = 10^4, Ainvade = FALSE, intInit = FALSE)

burninAA
p2  <-  n2/norm(as.matrix(n2), type="1")

n2next  <-  AtildeBound(nBound=p2, om=om, g=g, W_prime=W_prime, blkFX_prime = blkFX_prime, blkUS=blkUS, blkUX=blkUX, W=W, Iom=Iom, Ig=Ig, HS=HS, HX=HX, K=K, Z=Z, blkFS=blkFS,blkFX=blkFX) %*% n2



datMat  <-  matList_Mg_EM

theta.list  <-  list(D = 0.534, 
					 G = 0.469,
					 F = 0.64,
					 O = 614,
					 A = 6.7e-4,
					 S = 0.179,
					 R = 8.71)

delta.list  <-  list(delta_D = 0,
					 delta_G = 0,
					 delta_F = 0,
					 delta_O = 0,
					 delta_S = 0
					 )

plot(invadeEq$p_genotypes[1,], ylim=c(0,1), type='l', lwd=2)
lines(invadeEq$p_genotypes[2,], col=2, lwd=2)
lines(invadeEq$p_genotypes[3,], col=4, lwd=2)

plot(invadeEq$p_genotypes[1,]*colSums(invadeEq$nout), lwd=2)
lines(invadeEq$p_genotypes[2,]*colSums(invadeEq$nout), col=2, lwd=2)
lines(invadeEq$p_genotypes[3,]*colSums(invadeEq$nout), col=4, lwd=2)


invadeEq
Ainvade = TRUE



Cs  <-  c(0,1/2)
hs  <-  c(1/2, 1/4)

for(i in 1:length(Cs)){
	for(j in 1:length(hs)) {
		selLoopDatMat(sMax = 0.15, nSamples=1e+2, taxa = "Mimulus", useCompadre = TRUE,
					  datMat=datMat, theta.list=theta.list, delta.list=delta.list,
					  hf = hs[j], hm = hs[j], C = Cs[i], 
					  tlimit = 2*10^5, intInit = FALSE, writeFile=TRUE, progBar = TRUE)
	}
}

source('R/functions-Figs.R')
FunnelPlots(df1 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.5_hm0.5_C0_CompadreFALSE',
			df2 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.5_hm0.5_C0.5_CompadreFALSE',
			df3 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0_CompadreFALSE',
			df4 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_CompadreFALSE')
FunnelEigSimCompare(df1 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.5_hm0.5_C0_CompadreFALSE',
					df2 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.5_hm0.5_C0.5_CompadreFALSE',
					df3 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0_CompadreFALSE',
					df4 = 'Mimulus_SfxSm_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_CompadreFALSE')



FunnelPlots(df1 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f6',
			df2 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f6',
			df3 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f6',
			df4 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f6')
FunnelEigSimCompare(df1 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f6',
			df2 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f6',
			df3 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f6',
			df4 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f6')




	# Obligate Outcrossing
	# C = 0
	pars  <-  list(
					"hf"     =  1/2,
					"hm"     =  1/2,
					"C"      =  0,
					"delta"  =  0,
					"dj"     =  0,
					"da"     =  0,
					"dg"     =  0
					)

	selLoop(sMax = 0.15, nSamples=100,
			om = 2, g = 3, theta = c(0.6,0.6,0.05,5.8), theta_prime = 5.8, 
			hf = pars$hf, hm = pars$hm, C = pars$C, delta = pars$delta, 
			delta_j = pars$dj, delta_a = pars$da, delta_gamma = pars$dg, 
			tlimit = 10^6, writeFile = TRUE)


plot(results$p_genotypes[3,], type='l', lwd=2)


x  <-  rep(0,times=om)
x  <-  



rm(list=ls())
source('R/functions-Simulations.R')

test  <-  fwdDemModelSim(om = 2, g = 3, theta = c(0.6, 0.6, 0.05, 6), theta_prime = 5.9, 
						hf = 1/2, hm = 1/2, sf = 0.025, sm = 0.01, C = 1/2, delta = 0, 
						delta_j = 0, delta_a = 0, delta_gamma = 0, datMat = NA,
						tlimit = 10^5, eqThreshold = 1e-7, Ainvade = FALSE, intInit = FALSE)

test  <-  selLoop(sMax = 0.15, nSamples=1e+2,
					  om = 2, g = 3, theta = c(0.6,0.6,0.05,6), theta_prime = 6, 
					  hf = 1/2, hm = 1/2, C = 0, delta = 0, 
					  delta_j = 0, delta_a = 0, delta_gamma = 0,
					  tlimit = 10^5, intInit = FALSE, eqThreshold = 1e-6, writeFile=FALSE, progBar = TRUE)


source('R/functions-Figs.R')
FunnelPlots(df1 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f5.8',
			df2 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f5.8',
			df3 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f5.8',
			df4 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f5.8')
FunnelEigSimCompare(df1 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f5.8',
					df2 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f5.8',
					df3 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f5.8',
					df4 = 'demSimsSfxSmNew_sMax0.15_nSamples100_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f5.8')


polySpaceFig(df1 = "simPolySpaceNew_sMax0.15_nSamples2000_hf0.5_hm0.5_delta0_dj0_da0_dg0_f5.8",
			 df2 = "simPolySpaceNew_sMax0.15_nSamples2000_hf0.5_hm0.5_delta0_dj0_da0_dg0_f6",
			 df3 = "simPolySpaceNew_sMax0.15_nSamples2000_hf0.5_hm0.5_delta0_dj0_da0_dg0_f6.5",
			 df4 = "simPolySpaceNew_sMax0.15_nSamples1000_hf0.25_hm0.25_delta0_dj0_da0_dg0_f5.8",
			 df5 = "simPolySpaceNew_sMax0.15_nSamples1000_hf0.25_hm0.25_delta0_dj0_da0_dg0_f5.9",
			 df6 = "simPolySpaceNew_sMax0.15_nSamples1000_hf0.25_hm0.25_delta0_dj0_da0_dg0_f6.5") 

0.0015

extinctThreshTitrate(sMax=0.15, res=0.0015, 
					 om = 2, g = 3, theta = c(0.6,0.6,0.05,6), theta_prime = 5.8, 
					 hf = 1/2, hm = 1/2, C = 0, delta = 0, 
					 delta_j = 0, delta_a = 0, delta_gamma = 0,
					 tlimit = 10^5, Ainvade=FALSE, eqThreshold = 1e-8, verbose=TRUE, writeFile=TRUE)
extTest  <-  extinctionThreshold
plot(NA, xlim=c(0,sMax), ylim=c(0,sMax))
points(extTest[,2] ~ extTest[,1], pch=3, cex=2)

extinctThreshTitrateRotate(sMax=0.98, res=0.02, precision=1e-4,
						   om = 2, g = 3, theta = c(0.6,0.6,0.05,6.2), theta_prime = 6.2, 
						   hf = 1/4, hm = 1/4, C = 0, delta = 0, 
						   delta_j = 0, delta_a = 0, delta_gamma = 0,
						   tlimit = 10^5, Ainvade=FALSE, eqThreshold = 1e-8, verbose=TRUE, writeFile=TRUE)
	
smLine  <-  seq(0,0.15,length=100)

        inv_A  <-  popGen_A_invade(hf=1/4, hm=1/4, sm=smLine, C=0)
        inv_a  <-  popGen_a_invade(hf=1/4, hm=1/4, sm=smLine, C=0)
lines(inv_A ~ smLine, lwd=2)
lines(inv_a ~ smLine, lwd=2)



rm(list=ls())
source('R/functions-Simulations.R')

testInv  <-  titrateInvBoundaries(sMax=0.15, res=0.015, precision=1e-4,
						  om = 2, g = 3, theta = c(0.6,0.6,0.05,5.8), theta_prime = 5.8, 
						  hf = 1/2, hm = 1/2, C = 3/4, delta = 0.2, 
						  delta_j = 0, delta_a = 0.4, delta_gamma = 0,
						  tlimit = 10^2, eqThreshold = 1e-8, verbose=TRUE, writeFile=FALSE)

testExt  <-  extinctThreshTitrate(sMax=0.15, res=0.015, precision=1e-4,
					 om = 2, g = 3, theta = c(0.6,0.6,0.05,5.8), theta_prime = 5.8, 
					 hf = 1/2, hm = 1/2, C = 1/4, delta = 0, 
					 delta_j = 0, delta_a = 0.02, delta_gamma = 0,
					 tlimit = 10^5, Ainvade=FALSE, eqThreshold = 1e-8, verbose=TRUE, writeFile=FALSE)



sMax=0.1
res=0.05
precision = 1e-4
om = 2
g = 3
theta = c(0.6,0.6,0.05,NA)
theta_prime = NA
hVals= c(1/2, 1/4)
fVals = c(5.8, 5.9, 6.0, 6.5)
delta = 0
delta_j = 0
delta_a = 0
delta_gamma = 0
tlimit = 10^5
eqThreshold = 1e-8




	pars  <-  list(
					"hf"     =  1/2,
					"hm"     =  1/2,
					"C"      =  0,
					"delta"  =  0,
					"dj"     =  0,
					"da"     =  0,
					"dg"     =  0
					)

sMax=0.15
res=0.0015
precision=1e-4
om = 2
g = 3
theta = c(0.6,0.6,0.05,5.8)
theta_prime = 5.8
hf = pars$hf
hm = pars$hm
C = pars$C
delta = pars$delta
delta_j = pars$dj
delta_a = pars$da
delta_gamma = pars$dg
tlimit = 10^2
eqThreshold = 1e-8
verbose=TRUE
writeFile=TRUE

sfThreshold  <-  rep(NA, times=11)


for(i in 1:length(sfs)) {
	points(sfs[i] ~ smThreshold[i] , pch=3, cex=2)
	points(sfThreshold[i] ~ sms[i] , pch=3, cex=2)
}




makeDataDeltaPolyParamSpace(sMax=0.15, res=0.0015, precision = 1e-4,
							om = 2, g = 3, theta = c(0.6,0.6,0.05,6.5), theta_prime = 6.5, 
							hVals= c(1/2, 1/4), dStar = 0.8, 
							delta = 0, delta_j = 0, delta_a = 0, delta_gamma = 0,
							tlimit = 10^5, eqThreshold = 1e-8)








demViablePolySpaceFig  <-  function() {

    # Import data sets
    invA       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extA_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extA_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f6.csv", head=TRUE)
    extA_f6.2  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0_delta0_dj0_da0_dg0_f6.2.csv", head=TRUE)

    invB       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extB_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extB_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f6.csv", head=TRUE)
    extB_f6.2  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.25_delta0_dj0_da0_dg0_f6.2.csv", head=TRUE)

    invC       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extC_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extC_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f6.csv", head=TRUE)
    extC_f6.2  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.5_hm0.5_C0.5_delta0_dj0_da0_dg0_f6.2.csv", head=TRUE)

    invD       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extD_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extD_f5.9  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f5.9.csv", head=TRUE)
    extD_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0_delta0_dj0_da0_dg0_f6.csv", head=TRUE)

    invE       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extE_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extE_f5.9  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f5.9.csv", head=TRUE)
    extE_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.25_delta0_dj0_da0_dg0_f6.csv", head=TRUE)

    invF       <-  read.csv("./output/simData/invasionBoundaries_sMax0.15_res0.0015_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extF_f5.8  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f5.8.csv", head=TRUE)
    extF_f5.9  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f5.9.csv", head=TRUE)
    extF_f6.0  <-  read.csv("./output/simData/extThreshold_SfxSm_sMax0.15_res0.0015_hf0.25_hm0.25_C0.5_delta0_dj0_da0_dg0_f6.csv", head=TRUE)

    # Clean up a couple missing values from data
extA_f5.8$sfThreshold[16]  <-  mean(extA_f5.8$sfThreshold[15], extA_f5.8$sfThreshold[17])
extA_f6.0$sfThreshold[87]  <-  mean(extA_f6.0$sfThreshold[86], extA_f6.0$sfThreshold[88])
extA_f6.2$sfThreshold[88]  <-  mean(extA_f6.2$sfThreshold[87], extA_f6.2$sfThreshold[89])   
extA_f6.2$sfThreshold[95]  <-  mean(extA_f6.2$sfThreshold[94], extA_f6.2$sfThreshold[96])   
extA_f6.2$sfThreshold[56]  <-  extA_f6.2$sfThreshold[57]
extD_f5.8$sfThreshold[33]  <-  mean(extD_f5.8$sfThreshold[32], extD_f5.8$sfThreshold[34])
extD_f5.8$sfThreshold[37]  <-  mean(extD_f5.8$sfThreshold[36], extD_f5.8$sfThreshold[38])
extD_f5.8$sf[11]           <-  mean(extD_f5.8$sf[11], extD_f5.8$sfThreshold[21])
extD_f5.8$smThreshold[11]  <-  mean(extD_f5.8$smThreshold[12], extD_f5.8$sms[21])
extE_f5.8$sfThreshold[67]  <-  mean(extE_f5.8$sfThreshold[66], extE_f5.8$sfThreshold[68])
extE_f5.8$sf[9]            <-  mean(extE_f5.8$sf[9], extE_f5.8$sfThreshold[29])
extE_f5.8$smThreshold[11]  <-  mean(extE_f5.8$smThreshold[10], extE_f5.8$sms[29])
extE_f5.9$sfThreshold[87]  <-  mean(extE_f5.9$sfThreshold[86], extE_f5.9$sfThreshold[88])
extD_f6.0$sfThreshold[83]  <-  (extD_f6.0$sfThreshold[82] + extD_f6.0$sfThreshold[84])/2

# Color scheme
    COLS  <-  list("line"     =  transparentColor('#252525', opacity=1),
                   "extinct"  =  transparentColor('red', opacity=0.15))

# Set plot layout
layout.mat <- matrix(c(1:6), nrow=2, ncol=3, byrow=TRUE)
layout     <- layout(layout.mat,respect=TRUE)

##  Row 1: Additive allelic effects

    ##  Panel A: C = 0; hf = hm = 1/2
        par(omi=rep(0.5, 4), mar = c(3,3,0.5,0.5), bty='o', xaxt='s', yaxt='s',xpd=TRUE)
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2)
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extA_f5.8$sf[!is.na(extA_f5.8$smThreshold)], extA_f5.8$smThreshold[!is.na(extA_f5.8$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extA_f5.8$sms[!is.na(extA_f5.8$sfThreshold)], extA_f5.8$sfThreshold[!is.na(extA_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extA_f5.8)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extA_f5.8)   
        proportionalLabel(0.85, 0.14, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # f = 6.0 polygon
            t    <-  cbind(extA_f6.0$sf[!is.na(extA_f6.0$smThreshold)], extA_f6.0$smThreshold[!is.na(extA_f6.0$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extA_f6.0$sms[!is.na(extA_f6.0$sfThreshold)], extA_f6.0$sfThreshold[!is.na(extA_f6.0$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extA_f6.0)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extA_f6.0)   
        proportionalLabel(0.92, 0.35, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # f = 6.2 polygon
            t    <-  cbind(extA_f6.2$sf[!is.na(extA_f6.2$smThreshold)], extA_f6.2$smThreshold[!is.na(extA_f6.2$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extA_f6.2$sms[!is.na(extA_f6.2$sfThreshold)], extA_f6.2$sfThreshold[!is.na(extA_f6.2$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extA_f6.2)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extA_f6.2)   
        proportionalLabel(0.92, 0.54, expression(paste("6.2")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # Invasion Boundaries
        lines(aInvBound[1:88] ~ sms[1:88], lty=1, lwd=1.5, col=COLS$line, data=invA)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invA)
        # axes        
        axis(1, las=1, labels=NA)
        axis(2, las=1)
        proportionalLabel(-0.45, 0.5, expression(paste(italic(h), " = 1/2")), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=90)
        proportionalLabel(-0.3, 0.5, expression(paste(italic(s[f]))), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=90)
        proportionalLabel(0.5, 1.15, expression(paste(italic(C), ' = 0')), cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.03, 1.075, 'A', cex=1.2, adj=c(0.5, 0.5), xpd=NA)

    ##  Panel B: C = 1/4; hf = hm = 1/2
        # Make the plot
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2, bty='L')
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extB_f5.8$sf[!is.na(extB_f5.8$smThreshold)], extB_f5.8$smThreshold[!is.na(extB_f5.8$smThreshold)])
            b    <-  cbind(extB_f5.8$sms[!is.na(extB_f5.8$sfThreshold)], extB_f5.8$sfThreshold[!is.na(extB_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extB_f5.8)
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extB_f5.8)
        proportionalLabel(0.85, 0.14, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # f = 6.0 polygon
            t    <-  cbind(extB_f6.0$sf[!is.na(extB_f6.0$smThreshold)], extB_f6.0$smThreshold[!is.na(extB_f6.0$smThreshold)])
            b    <-  cbind(extB_f6.0$sms[!is.na(extB_f6.0$sfThreshold)], extB_f6.0$sfThreshold[!is.na(extB_f6.0$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extB_f6.0)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extB_f6.0)   
        proportionalLabel(0.9, 0.35, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # f = 6.2 polygon
            t    <-  cbind(extB_f6.2$sf[!is.na(extB_f6.2$smThreshold)], extB_f6.2$smThreshold[!is.na(extB_f6.2$smThreshold)])
            b    <-  cbind(extB_f6.2$sms[!is.na(extB_f6.2$sfThreshold)], extB_f6.2$sfThreshold[!is.na(extB_f6.2$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extB_f6.2)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extB_f6.2)   
#        proportionalLabel(0.9, 0.44, expression(paste("6.2")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(1.1, 0.525, expression(paste("6.2")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalArrows(px1=1.1, py1=0.525, px2=0.97, py2=0.525, length=0.03)
        # Invasion Boundaries
        lines(aInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invB)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invB)
        # axes        
        axis(1, las=1, labels=NA)
        axis(2, las=1, labels=NA)
        proportionalLabel(0.5, 1.15, expression(paste(italic(C), ' = 1/4')), cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.03, 1.075, 'B', cex=1.2, adj=c(0.5, 0.5), xpd=NA)

    ##  Panel C: C = 1/2; hf = hm = 1/2
        # Make the plot
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2, bty='L')
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extC_f5.8$sf[!is.na(extC_f5.8$smThreshold)], extC_f5.8$smThreshold[!is.na(extC_f5.8$smThreshold)])
            b    <-  cbind(extC_f5.8$sms[!is.na(extC_f5.8$sfThreshold)], extC_f5.8$sfThreshold[!is.na(extC_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extC_f5.8)
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extC_f5.8)
        proportionalLabel(0.85, 0.14, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        # f = 6.0 polygon
            t    <-  cbind(extC_f6.0$sf[!is.na(extC_f6.0$smThreshold)], extC_f6.0$smThreshold[!is.na(extC_f6.0$smThreshold)])
            b    <-  cbind(extC_f6.0$sms[!is.na(extC_f6.0$sfThreshold)], extC_f6.0$sfThreshold[!is.na(extC_f6.0$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extC_f6.0)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extC_f6.0)   
#        proportionalLabel(0.85, 0.22, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
#        proportionalArrows(0.875, 0.26, 0.95, 0.3, length=0.051, lwd=1)
        proportionalLabel(1.1, 0.32, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalArrows(px1=1.1, py1=0.32, px2=0.97, py2=0.32, length=0.03)
        # Invasion Boundaries
        lines(aInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invC)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invC)
        # axes        
        axis(1, las=1, labels=NA)
        axis(2, las=1, labels=NA)
        proportionalLabel(0.5, 1.15, expression(paste(italic(C), ' = 1/2')), cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.03, 1.075, 'C', cex=1.2, adj=c(0.5, 0.5), xpd=NA)


##  Row 2: Dominance Reversal
  ##  Panel D: C = 0; hf = hm = 1/4
        # Make the plot
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2, bty='L')
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extD_f5.8$sf[!is.na(extD_f5.8$smThreshold)], extD_f5.8$smThreshold[!is.na(extD_f5.8$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extD_f5.8$sms[!is.na(extD_f5.8$sfThreshold)], extD_f5.8$sfThreshold[!is.na(extD_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extD_f5.8)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extD_f5.8)   
        proportionalLabel(0.45, 0.8, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=75)
        # f = 5.9 polygon
            t    <-  cbind(extD_f5.9$sf[!is.na(extD_f5.9$smThreshold)], extD_f5.9$smThreshold[!is.na(extD_f5.9$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extD_f5.9$sms[!is.na(extD_f5.9$sfThreshold)], extD_f5.9$sfThreshold[!is.na(extD_f5.9$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extD_f5.9)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extD_f5.9)   
#        proportionalLabel(0.85, 0.25, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(0.64, 0.85, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=75)
        # f = 6.0 polygon
            t    <-  cbind(extD_f6.0$sf[!is.na(extD_f6.0$smThreshold)], extD_f6.0$smThreshold[!is.na(extD_f6.0$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extD_f6.0$sms, extD_f6.0$sfThreshold)
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extD_f6.0)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extD_f6.0)   
#        proportionalLabel(0.85, 0.7, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(0.83, 0.85, expression(paste("6.0")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=75)
        # Invasion Boundaries
        lines(aInvBound[1:33] ~ sms[1:33], lty=1, lwd=1.5, col=COLS$line, data=invD)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invD)
        # axes        
        axis(1, las=1)
        axis(2, las=1)
        proportionalLabel(-0.45, 0.5, expression(paste(italic(h), " = 1/4")), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=90)
        proportionalLabel(-0.3, 0.5, expression(paste(italic(s[f]))), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=90)
        proportionalLabel(0.03, 1.075, 'D', cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.5, -0.3, expression(paste(italic(s[m]))), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=0)


  ##  Panel E: C = 1/4; hf = hm = 1/4
        # Make the plot
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2, bty='L')
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extE_f5.8$sf[!is.na(extE_f5.8$smThreshold)], extE_f5.8$smThreshold[!is.na(extE_f5.8$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extE_f5.8$sms[!is.na(extE_f5.8$sfThreshold)], extE_f5.8$sfThreshold[!is.na(extE_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extE_f5.8)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extE_f5.8)   
#        proportionalLabel(0.85, 0.14, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(0.8, 0.85, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=60)
        # f = 5.9 polygon
            t    <-  cbind(extE_f5.9$sf[!is.na(extE_f5.9$smThreshold)], extE_f5.9$smThreshold[!is.na(extE_f5.9$smThreshold)])
            b    <-  cbind(extE_f5.9$sms[!is.na(extE_f5.9$sfThreshold)], extE_f5.9$sfThreshold[!is.na(extE_f5.9$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extE_f5.9)
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extE_f5.9)
#        proportionalLabel(0.85, 0.33, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(0.9, 0.63, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=60)
        # Invasion Boundaries
        lines(aInvBound[1:68] ~ sms[1:68], lty=1, lwd=1.5, col=COLS$line, data=invE)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invE)
        # axes        
        axis(1, las=1)
        axis(2, las=1, labels=NA)
        proportionalLabel(0.03, 1.075, 'E', cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.5, -0.3, expression(paste(italic(s[m]))), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=0)

  ##  Panel F: C = 1/2; hf = hm = 1/4
        # Make the plot
        plot(NA, axes=FALSE, type='n', main='',xlim = c(0,0.15), ylim = c(0,0.15), ylab='', xlab='', cex.lab=1.2, bty='L')
        usr  <-  par('usr')
        rect(usr[1], usr[3], usr[2], usr[4], col='white', border=NA)
        plotGrid(lineCol='grey80')
        box()
        # Extinction Thresholds
        # f = 5.8 polygon
            t    <-  cbind(extF_f5.8$sf[!is.na(extF_f5.8$smThreshold)], extF_f5.8$smThreshold[!is.na(extF_f5.8$smThreshold)])
            t    <-  rbind(t, c(0.15, 0.15))
            b    <-  cbind(extF_f5.8$sms[!is.na(extF_f5.8$sfThreshold)], extF_f5.8$sfThreshold[!is.na(extF_f5.8$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extF_f5.8)   
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extF_f5.8)   
#        proportionalLabel(0.85, 0.14, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(0.85, 0.36, expression(paste(italic(f), " = 5.8")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=30)
        # f = 5.9 polygon
            t    <-  cbind(extF_f5.9$sf[!is.na(extF_f5.9$smThreshold)], extF_f5.9$smThreshold[!is.na(extF_f5.9$smThreshold)])
            b    <-  cbind(extF_f5.9$sms[!is.na(extF_f5.9$sfThreshold)], extF_f5.9$sfThreshold[!is.na(extF_f5.9$sfThreshold)])
            polygon(c(t[,2],rev(b[,1])), c(t[,1],rev(b[,2])), col=COLS$extinct, border=NA)
        lines(sf ~ smThreshold, lty=1, lwd=0.5, col=COLS$line, data=extF_f5.9)
        lines(sfThreshold ~ sms, lty=1, lwd=0.5, col=COLS$line, data=extF_f5.9)
#        proportionalLabel(0.85, 0.33, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalLabel(1.1, 0.24, expression(paste("5.9")), cex=1, adj=c(0.5, 0.5), xpd=NA, srt=0)
        proportionalArrows(px1=1.1, py1=0.24, px2=0.97, py2=0.24, length=0.03)
        # Invasion Boundaries
        lines(aInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invF)
        lines(AInvBound ~ sms, lty=1, lwd=1.5, col=COLS$line, data=invF)
        # axes        
        axis(1, las=1)
        axis(2, las=1, labels=NA)
        proportionalLabel(0.03, 1.075, 'F', cex=1.2, adj=c(0.5, 0.5), xpd=NA)
        proportionalLabel(0.5, -0.3, expression(paste(italic(s[m]))), cex=1.2, adj=c(0.5, 0.5), xpd=NA, srt=0)
}







	# Obligate Outcrossing
	# C = 0
	pars  <-  list(
					"hf"     =  1/2,
					"hm"     =  1/2,
					"C"      =  0,
					"delta"  =  0,
					"dj"     =  0.2,
					"da"     =  0,
					"dg"     =  0
					)

test  <-  titrateInvBoundaries(sMax=0.15, res=0.0015, precision=1e-4,
					 om = 2, g = 3, theta = c(0.6,0.6,0.05,5.8), theta_prime = 5.8, 
					 hf = pars$hf, hm = pars$hm, C = pars$C, delta = pars$delta, 
					 delta_j = pars$dj, delta_a = pars$da, delta_gamma = pars$dg,
					 tlimit = 10^3, eqThreshold = 1e-8, verbose=TRUE, writeFile=FALSE)
head(test)
plot(test$aInvBound ~ test$sms)
points(test$AInvBound ~ test$sms)